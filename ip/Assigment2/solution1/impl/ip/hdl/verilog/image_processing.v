// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="image_processing_image_processing,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=921615,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=971,HLS_SYN_LUT=1233,HLS_VERSION=2020_2}" *)

module image_processing (
        ap_clk,
        ap_rst_n,
        m_axi_AXI_DATA_AWVALID,
        m_axi_AXI_DATA_AWREADY,
        m_axi_AXI_DATA_AWADDR,
        m_axi_AXI_DATA_AWID,
        m_axi_AXI_DATA_AWLEN,
        m_axi_AXI_DATA_AWSIZE,
        m_axi_AXI_DATA_AWBURST,
        m_axi_AXI_DATA_AWLOCK,
        m_axi_AXI_DATA_AWCACHE,
        m_axi_AXI_DATA_AWPROT,
        m_axi_AXI_DATA_AWQOS,
        m_axi_AXI_DATA_AWREGION,
        m_axi_AXI_DATA_AWUSER,
        m_axi_AXI_DATA_WVALID,
        m_axi_AXI_DATA_WREADY,
        m_axi_AXI_DATA_WDATA,
        m_axi_AXI_DATA_WSTRB,
        m_axi_AXI_DATA_WLAST,
        m_axi_AXI_DATA_WID,
        m_axi_AXI_DATA_WUSER,
        m_axi_AXI_DATA_ARVALID,
        m_axi_AXI_DATA_ARREADY,
        m_axi_AXI_DATA_ARADDR,
        m_axi_AXI_DATA_ARID,
        m_axi_AXI_DATA_ARLEN,
        m_axi_AXI_DATA_ARSIZE,
        m_axi_AXI_DATA_ARBURST,
        m_axi_AXI_DATA_ARLOCK,
        m_axi_AXI_DATA_ARCACHE,
        m_axi_AXI_DATA_ARPROT,
        m_axi_AXI_DATA_ARQOS,
        m_axi_AXI_DATA_ARREGION,
        m_axi_AXI_DATA_ARUSER,
        m_axi_AXI_DATA_RVALID,
        m_axi_AXI_DATA_RREADY,
        m_axi_AXI_DATA_RDATA,
        m_axi_AXI_DATA_RLAST,
        m_axi_AXI_DATA_RID,
        m_axi_AXI_DATA_RUSER,
        m_axi_AXI_DATA_RRESP,
        m_axi_AXI_DATA_BVALID,
        m_axi_AXI_DATA_BREADY,
        m_axi_AXI_DATA_BRESP,
        m_axi_AXI_DATA_BID,
        m_axi_AXI_DATA_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state13 = 14'd512;
parameter    ap_ST_fsm_state14 = 14'd1024;
parameter    ap_ST_fsm_state15 = 14'd2048;
parameter    ap_ST_fsm_state16 = 14'd4096;
parameter    ap_ST_fsm_state17 = 14'd8192;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_AXI_DATA_AWVALID;
input   m_axi_AXI_DATA_AWREADY;
output  [C_M_AXI_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_AXI_DATA_AWADDR;
output  [C_M_AXI_AXI_DATA_ID_WIDTH - 1:0] m_axi_AXI_DATA_AWID;
output  [7:0] m_axi_AXI_DATA_AWLEN;
output  [2:0] m_axi_AXI_DATA_AWSIZE;
output  [1:0] m_axi_AXI_DATA_AWBURST;
output  [1:0] m_axi_AXI_DATA_AWLOCK;
output  [3:0] m_axi_AXI_DATA_AWCACHE;
output  [2:0] m_axi_AXI_DATA_AWPROT;
output  [3:0] m_axi_AXI_DATA_AWQOS;
output  [3:0] m_axi_AXI_DATA_AWREGION;
output  [C_M_AXI_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_AXI_DATA_AWUSER;
output   m_axi_AXI_DATA_WVALID;
input   m_axi_AXI_DATA_WREADY;
output  [C_M_AXI_AXI_DATA_DATA_WIDTH - 1:0] m_axi_AXI_DATA_WDATA;
output  [C_M_AXI_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_AXI_DATA_WSTRB;
output   m_axi_AXI_DATA_WLAST;
output  [C_M_AXI_AXI_DATA_ID_WIDTH - 1:0] m_axi_AXI_DATA_WID;
output  [C_M_AXI_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_AXI_DATA_WUSER;
output   m_axi_AXI_DATA_ARVALID;
input   m_axi_AXI_DATA_ARREADY;
output  [C_M_AXI_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_AXI_DATA_ARADDR;
output  [C_M_AXI_AXI_DATA_ID_WIDTH - 1:0] m_axi_AXI_DATA_ARID;
output  [7:0] m_axi_AXI_DATA_ARLEN;
output  [2:0] m_axi_AXI_DATA_ARSIZE;
output  [1:0] m_axi_AXI_DATA_ARBURST;
output  [1:0] m_axi_AXI_DATA_ARLOCK;
output  [3:0] m_axi_AXI_DATA_ARCACHE;
output  [2:0] m_axi_AXI_DATA_ARPROT;
output  [3:0] m_axi_AXI_DATA_ARQOS;
output  [3:0] m_axi_AXI_DATA_ARREGION;
output  [C_M_AXI_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_AXI_DATA_ARUSER;
input   m_axi_AXI_DATA_RVALID;
output   m_axi_AXI_DATA_RREADY;
input  [C_M_AXI_AXI_DATA_DATA_WIDTH - 1:0] m_axi_AXI_DATA_RDATA;
input   m_axi_AXI_DATA_RLAST;
input  [C_M_AXI_AXI_DATA_ID_WIDTH - 1:0] m_axi_AXI_DATA_RID;
input  [C_M_AXI_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_AXI_DATA_RUSER;
input  [1:0] m_axi_AXI_DATA_RRESP;
input   m_axi_AXI_DATA_BVALID;
output   m_axi_AXI_DATA_BREADY;
input  [1:0] m_axi_AXI_DATA_BRESP;
input  [C_M_AXI_AXI_DATA_ID_WIDTH - 1:0] m_axi_AXI_DATA_BID;
input  [C_M_AXI_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_AXI_DATA_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] in_r;
wire   [63:0] out_r;
reg    AXI_DATA_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    AXI_DATA_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln13_reg_187;
reg    AXI_DATA_blk_n_AW;
reg    AXI_DATA_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln13_reg_187_pp0_iter2_reg;
reg    AXI_DATA_blk_n_B;
wire    ap_CS_fsm_state17;
reg    AXI_DATA_AWVALID;
wire    AXI_DATA_AWREADY;
reg    AXI_DATA_WVALID;
wire    AXI_DATA_WREADY;
reg    AXI_DATA_ARVALID;
wire    AXI_DATA_ARREADY;
wire    AXI_DATA_RVALID;
reg    AXI_DATA_RREADY;
wire   [7:0] AXI_DATA_RDATA;
wire    AXI_DATA_RLAST;
wire   [0:0] AXI_DATA_RID;
wire   [0:0] AXI_DATA_RUSER;
wire   [1:0] AXI_DATA_RRESP;
wire    AXI_DATA_BVALID;
reg    AXI_DATA_BREADY;
wire   [1:0] AXI_DATA_BRESP;
wire   [0:0] AXI_DATA_BID;
wire   [0:0] AXI_DATA_BUSER;
reg   [19:0] i_reg_122;
reg   [63:0] AXI_DATA_addr_reg_170;
reg   [63:0] AXI_DATA_addr_1_reg_176;
wire   [19:0] add_ln13_fu_145_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln13_fu_151_p2;
reg   [0:0] icmp_ln13_reg_187_pp0_iter1_reg;
reg   [7:0] AXI_DATA_addr_read_reg_191;
wire   [7:0] select_ln14_fu_162_p3;
reg   [7:0] select_ln14_reg_196;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln14_fu_157_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

image_processing_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in_r(in_r),
    .out_r(out_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

image_processing_AXI_DATA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_DATA_CACHE_VALUE ))
AXI_DATA_m_axi_U(
    .AWVALID(m_axi_AXI_DATA_AWVALID),
    .AWREADY(m_axi_AXI_DATA_AWREADY),
    .AWADDR(m_axi_AXI_DATA_AWADDR),
    .AWID(m_axi_AXI_DATA_AWID),
    .AWLEN(m_axi_AXI_DATA_AWLEN),
    .AWSIZE(m_axi_AXI_DATA_AWSIZE),
    .AWBURST(m_axi_AXI_DATA_AWBURST),
    .AWLOCK(m_axi_AXI_DATA_AWLOCK),
    .AWCACHE(m_axi_AXI_DATA_AWCACHE),
    .AWPROT(m_axi_AXI_DATA_AWPROT),
    .AWQOS(m_axi_AXI_DATA_AWQOS),
    .AWREGION(m_axi_AXI_DATA_AWREGION),
    .AWUSER(m_axi_AXI_DATA_AWUSER),
    .WVALID(m_axi_AXI_DATA_WVALID),
    .WREADY(m_axi_AXI_DATA_WREADY),
    .WDATA(m_axi_AXI_DATA_WDATA),
    .WSTRB(m_axi_AXI_DATA_WSTRB),
    .WLAST(m_axi_AXI_DATA_WLAST),
    .WID(m_axi_AXI_DATA_WID),
    .WUSER(m_axi_AXI_DATA_WUSER),
    .ARVALID(m_axi_AXI_DATA_ARVALID),
    .ARREADY(m_axi_AXI_DATA_ARREADY),
    .ARADDR(m_axi_AXI_DATA_ARADDR),
    .ARID(m_axi_AXI_DATA_ARID),
    .ARLEN(m_axi_AXI_DATA_ARLEN),
    .ARSIZE(m_axi_AXI_DATA_ARSIZE),
    .ARBURST(m_axi_AXI_DATA_ARBURST),
    .ARLOCK(m_axi_AXI_DATA_ARLOCK),
    .ARCACHE(m_axi_AXI_DATA_ARCACHE),
    .ARPROT(m_axi_AXI_DATA_ARPROT),
    .ARQOS(m_axi_AXI_DATA_ARQOS),
    .ARREGION(m_axi_AXI_DATA_ARREGION),
    .ARUSER(m_axi_AXI_DATA_ARUSER),
    .RVALID(m_axi_AXI_DATA_RVALID),
    .RREADY(m_axi_AXI_DATA_RREADY),
    .RDATA(m_axi_AXI_DATA_RDATA),
    .RLAST(m_axi_AXI_DATA_RLAST),
    .RID(m_axi_AXI_DATA_RID),
    .RUSER(m_axi_AXI_DATA_RUSER),
    .RRESP(m_axi_AXI_DATA_RRESP),
    .BVALID(m_axi_AXI_DATA_BVALID),
    .BREADY(m_axi_AXI_DATA_BREADY),
    .BRESP(m_axi_AXI_DATA_BRESP),
    .BID(m_axi_AXI_DATA_BID),
    .BUSER(m_axi_AXI_DATA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(AXI_DATA_ARVALID),
    .I_ARREADY(AXI_DATA_ARREADY),
    .I_ARADDR(AXI_DATA_addr_reg_170),
    .I_ARID(1'd0),
    .I_ARLEN(32'd921600),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(AXI_DATA_RVALID),
    .I_RREADY(AXI_DATA_RREADY),
    .I_RDATA(AXI_DATA_RDATA),
    .I_RID(AXI_DATA_RID),
    .I_RUSER(AXI_DATA_RUSER),
    .I_RRESP(AXI_DATA_RRESP),
    .I_RLAST(AXI_DATA_RLAST),
    .I_AWVALID(AXI_DATA_AWVALID),
    .I_AWREADY(AXI_DATA_AWREADY),
    .I_AWADDR(AXI_DATA_addr_1_reg_176),
    .I_AWID(1'd0),
    .I_AWLEN(32'd921600),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(AXI_DATA_WVALID),
    .I_WREADY(AXI_DATA_WREADY),
    .I_WDATA(select_ln14_reg_196),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(AXI_DATA_BVALID),
    .I_BREADY(AXI_DATA_BREADY),
    .I_BRESP(AXI_DATA_BRESP),
    .I_BID(AXI_DATA_BID),
    .I_BUSER(AXI_DATA_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_122 <= add_ln13_fu_145_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_122 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        AXI_DATA_addr_1_reg_176 <= out_r;
        AXI_DATA_addr_reg_170 <= in_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_187 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AXI_DATA_addr_read_reg_191 <= AXI_DATA_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_187 <= icmp_ln13_fu_151_p2;
        icmp_ln13_reg_187_pp0_iter1_reg <= icmp_ln13_reg_187;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln13_reg_187_pp0_iter2_reg <= icmp_ln13_reg_187_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_187_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln14_reg_196 <= select_ln14_fu_162_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        AXI_DATA_ARVALID = 1'b1;
    end else begin
        AXI_DATA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        AXI_DATA_AWVALID = 1'b1;
    end else begin
        AXI_DATA_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_DATA_BVALID) & (1'b1 == ap_CS_fsm_state17))) begin
        AXI_DATA_BREADY = 1'b1;
    end else begin
        AXI_DATA_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_187 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        AXI_DATA_RREADY = 1'b1;
    end else begin
        AXI_DATA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_187_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AXI_DATA_WVALID = 1'b1;
    end else begin
        AXI_DATA_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AXI_DATA_blk_n_AR = m_axi_AXI_DATA_ARREADY;
    end else begin
        AXI_DATA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AXI_DATA_blk_n_AW = m_axi_AXI_DATA_AWREADY;
    end else begin
        AXI_DATA_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        AXI_DATA_blk_n_B = m_axi_AXI_DATA_BVALID;
    end else begin
        AXI_DATA_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_187 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        AXI_DATA_blk_n_R = m_axi_AXI_DATA_RVALID;
    end else begin
        AXI_DATA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln13_reg_187_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        AXI_DATA_blk_n_W = m_axi_AXI_DATA_WREADY;
    end else begin
        AXI_DATA_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln13_fu_151_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_DATA_BVALID) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == AXI_DATA_BVALID) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln13_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln13_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == AXI_DATA_BVALID) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_145_p2 = (i_reg_122 + 20'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == AXI_DATA_RVALID) & (icmp_ln13_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == AXI_DATA_RVALID) & (icmp_ln13_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == AXI_DATA_RVALID) & (icmp_ln13_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((1'b0 == AXI_DATA_RVALID) & (icmp_ln13_reg_187 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((1'b0 == AXI_DATA_WREADY) & (icmp_ln13_reg_187_pp0_iter2_reg == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((1'b0 == AXI_DATA_ARREADY) | (1'b0 == AXI_DATA_AWREADY));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln13_fu_151_p2 = ((i_reg_122 == 20'd921600) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_157_p2 = (($signed(AXI_DATA_addr_read_reg_191) > $signed(8'd50)) ? 1'b1 : 1'b0);

assign select_ln14_fu_162_p3 = ((icmp_ln14_fu_157_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

endmodule //image_processing
