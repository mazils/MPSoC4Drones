-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_processing is
generic (
    C_M_AXI_AXI_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_AXI_DATA_AWVALID : OUT STD_LOGIC;
    m_axi_AXI_DATA_AWREADY : IN STD_LOGIC;
    m_axi_AXI_DATA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_DATA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_AXI_DATA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_DATA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DATA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DATA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_AXI_DATA_WVALID : OUT STD_LOGIC;
    m_axi_AXI_DATA_WREADY : IN STD_LOGIC;
    m_axi_AXI_DATA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_AXI_DATA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_AXI_DATA_WLAST : OUT STD_LOGIC;
    m_axi_AXI_DATA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_AXI_DATA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_AXI_DATA_ARVALID : OUT STD_LOGIC;
    m_axi_AXI_DATA_ARREADY : IN STD_LOGIC;
    m_axi_AXI_DATA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_DATA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_AXI_DATA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_DATA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DATA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_DATA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_DATA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_AXI_DATA_RVALID : IN STD_LOGIC;
    m_axi_AXI_DATA_RREADY : OUT STD_LOGIC;
    m_axi_AXI_DATA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_AXI_DATA_RLAST : IN STD_LOGIC;
    m_axi_AXI_DATA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_AXI_DATA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_AXI_DATA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_BVALID : IN STD_LOGIC;
    m_axi_AXI_DATA_BREADY : OUT STD_LOGIC;
    m_axi_AXI_DATA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_DATA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_AXI_DATA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_DATA_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of image_processing is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_processing_image_processing,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=921615,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=971,HLS_SYN_LUT=1233,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_E1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011100001000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_E1000 : STD_LOGIC_VECTOR (19 downto 0) := "11100001000000000000";
    constant ap_const_lv8_32 : STD_LOGIC_VECTOR (7 downto 0) := "00110010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal AXI_DATA_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal AXI_DATA_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln13_reg_187 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_blk_n_AW : STD_LOGIC;
    signal AXI_DATA_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln13_reg_187_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal AXI_DATA_AWVALID : STD_LOGIC;
    signal AXI_DATA_AWREADY : STD_LOGIC;
    signal AXI_DATA_WVALID : STD_LOGIC;
    signal AXI_DATA_WREADY : STD_LOGIC;
    signal AXI_DATA_ARVALID : STD_LOGIC;
    signal AXI_DATA_ARREADY : STD_LOGIC;
    signal AXI_DATA_RVALID : STD_LOGIC;
    signal AXI_DATA_RREADY : STD_LOGIC;
    signal AXI_DATA_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal AXI_DATA_RLAST : STD_LOGIC;
    signal AXI_DATA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DATA_BVALID : STD_LOGIC;
    signal AXI_DATA_BREADY : STD_LOGIC;
    signal AXI_DATA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_DATA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_122 : STD_LOGIC_VECTOR (19 downto 0);
    signal AXI_DATA_addr_reg_170 : STD_LOGIC_VECTOR (63 downto 0);
    signal AXI_DATA_addr_1_reg_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_fu_145_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln13_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_187_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_DATA_addr_read_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln14_fu_162_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln14_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln14_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component image_processing_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component image_processing_AXI_DATA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component image_processing_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_r => in_r,
        out_r => out_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXI_DATA_m_axi_U : component image_processing_AXI_DATA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_DATA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_AXI_DATA_AWVALID,
        AWREADY => m_axi_AXI_DATA_AWREADY,
        AWADDR => m_axi_AXI_DATA_AWADDR,
        AWID => m_axi_AXI_DATA_AWID,
        AWLEN => m_axi_AXI_DATA_AWLEN,
        AWSIZE => m_axi_AXI_DATA_AWSIZE,
        AWBURST => m_axi_AXI_DATA_AWBURST,
        AWLOCK => m_axi_AXI_DATA_AWLOCK,
        AWCACHE => m_axi_AXI_DATA_AWCACHE,
        AWPROT => m_axi_AXI_DATA_AWPROT,
        AWQOS => m_axi_AXI_DATA_AWQOS,
        AWREGION => m_axi_AXI_DATA_AWREGION,
        AWUSER => m_axi_AXI_DATA_AWUSER,
        WVALID => m_axi_AXI_DATA_WVALID,
        WREADY => m_axi_AXI_DATA_WREADY,
        WDATA => m_axi_AXI_DATA_WDATA,
        WSTRB => m_axi_AXI_DATA_WSTRB,
        WLAST => m_axi_AXI_DATA_WLAST,
        WID => m_axi_AXI_DATA_WID,
        WUSER => m_axi_AXI_DATA_WUSER,
        ARVALID => m_axi_AXI_DATA_ARVALID,
        ARREADY => m_axi_AXI_DATA_ARREADY,
        ARADDR => m_axi_AXI_DATA_ARADDR,
        ARID => m_axi_AXI_DATA_ARID,
        ARLEN => m_axi_AXI_DATA_ARLEN,
        ARSIZE => m_axi_AXI_DATA_ARSIZE,
        ARBURST => m_axi_AXI_DATA_ARBURST,
        ARLOCK => m_axi_AXI_DATA_ARLOCK,
        ARCACHE => m_axi_AXI_DATA_ARCACHE,
        ARPROT => m_axi_AXI_DATA_ARPROT,
        ARQOS => m_axi_AXI_DATA_ARQOS,
        ARREGION => m_axi_AXI_DATA_ARREGION,
        ARUSER => m_axi_AXI_DATA_ARUSER,
        RVALID => m_axi_AXI_DATA_RVALID,
        RREADY => m_axi_AXI_DATA_RREADY,
        RDATA => m_axi_AXI_DATA_RDATA,
        RLAST => m_axi_AXI_DATA_RLAST,
        RID => m_axi_AXI_DATA_RID,
        RUSER => m_axi_AXI_DATA_RUSER,
        RRESP => m_axi_AXI_DATA_RRESP,
        BVALID => m_axi_AXI_DATA_BVALID,
        BREADY => m_axi_AXI_DATA_BREADY,
        BRESP => m_axi_AXI_DATA_BRESP,
        BID => m_axi_AXI_DATA_BID,
        BUSER => m_axi_AXI_DATA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXI_DATA_ARVALID,
        I_ARREADY => AXI_DATA_ARREADY,
        I_ARADDR => AXI_DATA_addr_reg_170,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_E1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => AXI_DATA_RVALID,
        I_RREADY => AXI_DATA_RREADY,
        I_RDATA => AXI_DATA_RDATA,
        I_RID => AXI_DATA_RID,
        I_RUSER => AXI_DATA_RUSER,
        I_RRESP => AXI_DATA_RRESP,
        I_RLAST => AXI_DATA_RLAST,
        I_AWVALID => AXI_DATA_AWVALID,
        I_AWREADY => AXI_DATA_AWREADY,
        I_AWADDR => AXI_DATA_addr_1_reg_176,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_E1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => AXI_DATA_WVALID,
        I_WREADY => AXI_DATA_WREADY,
        I_WDATA => select_ln14_reg_196,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => AXI_DATA_BVALID,
        I_BREADY => AXI_DATA_BREADY,
        I_BRESP => AXI_DATA_BRESP,
        I_BID => AXI_DATA_BID,
        I_BUSER => AXI_DATA_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_122 <= add_ln13_fu_145_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_122 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                AXI_DATA_addr_1_reg_176 <= out_r;
                AXI_DATA_addr_reg_170 <= in_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                AXI_DATA_addr_read_reg_191 <= AXI_DATA_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_187 <= icmp_ln13_fu_151_p2;
                icmp_ln13_reg_187_pp0_iter1_reg <= icmp_ln13_reg_187;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln13_reg_187_pp0_iter2_reg <= icmp_ln13_reg_187_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_187_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln14_reg_196 <= select_ln14_fu_162_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_state17, AXI_DATA_BVALID, ap_enable_reg_pp0_iter0, icmp_ln13_fu_151_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln13_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln13_fu_151_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = AXI_DATA_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    AXI_DATA_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            AXI_DATA_ARVALID <= ap_const_logic_1;
        else 
            AXI_DATA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_DATA_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            AXI_DATA_AWVALID <= ap_const_logic_1;
        else 
            AXI_DATA_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_DATA_BREADY_assign_proc : process(ap_CS_fsm_state17, AXI_DATA_BVALID)
    begin
        if (((ap_const_logic_1 = AXI_DATA_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            AXI_DATA_BREADY <= ap_const_logic_1;
        else 
            AXI_DATA_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    AXI_DATA_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln13_reg_187, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            AXI_DATA_RREADY <= ap_const_logic_1;
        else 
            AXI_DATA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    AXI_DATA_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln13_reg_187_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln13_reg_187_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AXI_DATA_WVALID <= ap_const_logic_1;
        else 
            AXI_DATA_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_DATA_blk_n_AR_assign_proc : process(m_axi_AXI_DATA_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AXI_DATA_blk_n_AR <= m_axi_AXI_DATA_ARREADY;
        else 
            AXI_DATA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    AXI_DATA_blk_n_AW_assign_proc : process(m_axi_AXI_DATA_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AXI_DATA_blk_n_AW <= m_axi_AXI_DATA_AWREADY;
        else 
            AXI_DATA_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AXI_DATA_blk_n_B_assign_proc : process(m_axi_AXI_DATA_BVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AXI_DATA_blk_n_B <= m_axi_AXI_DATA_BVALID;
        else 
            AXI_DATA_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    AXI_DATA_blk_n_R_assign_proc : process(m_axi_AXI_DATA_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln13_reg_187)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            AXI_DATA_blk_n_R <= m_axi_AXI_DATA_RVALID;
        else 
            AXI_DATA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    AXI_DATA_blk_n_W_assign_proc : process(m_axi_AXI_DATA_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln13_reg_187_pp0_iter2_reg)
    begin
        if (((icmp_ln13_reg_187_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            AXI_DATA_blk_n_W <= m_axi_AXI_DATA_WREADY;
        else 
            AXI_DATA_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln13_fu_145_p2 <= std_logic_vector(unsigned(i_reg_122) + unsigned(ap_const_lv20_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln13_reg_187, AXI_DATA_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = AXI_DATA_RVALID) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln13_reg_187, ap_enable_reg_pp0_iter3, AXI_DATA_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_logic_0 = AXI_DATA_RVALID) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln13_reg_187, ap_enable_reg_pp0_iter3, AXI_DATA_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_logic_0 = AXI_DATA_RVALID) and (icmp_ln13_reg_187 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln13_reg_187, AXI_DATA_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_logic_0 = AXI_DATA_RVALID) and (icmp_ln13_reg_187 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(icmp_ln13_reg_187_pp0_iter2_reg, AXI_DATA_WREADY)
    begin
                ap_block_state12_io <= ((ap_const_logic_0 = AXI_DATA_WREADY) and (icmp_ln13_reg_187_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(AXI_DATA_AWREADY, AXI_DATA_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = AXI_DATA_ARREADY) or (ap_const_logic_0 = AXI_DATA_AWREADY));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln13_fu_151_p2)
    begin
        if ((icmp_ln13_fu_151_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17, AXI_DATA_BVALID)
    begin
        if (((ap_const_logic_1 = AXI_DATA_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, AXI_DATA_BVALID)
    begin
        if (((ap_const_logic_1 = AXI_DATA_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln13_fu_151_p2 <= "1" when (i_reg_122 = ap_const_lv20_E1000) else "0";
    icmp_ln14_fu_157_p2 <= "1" when (signed(AXI_DATA_addr_read_reg_191) > signed(ap_const_lv8_32)) else "0";
    select_ln14_fu_162_p3 <= 
        ap_const_lv8_FF when (icmp_ln14_fu_157_p2(0) = '1') else 
        ap_const_lv8_0;
end behav;
