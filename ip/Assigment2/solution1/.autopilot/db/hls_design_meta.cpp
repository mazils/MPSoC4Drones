#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_AXI_DATA_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DATA_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DATA_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_AXI_DATA_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DATA_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_AXI_DATA_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_AXI_DATA_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_AXI_DATA_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_AXI_DATA_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_AXI_DATA_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_AXI_DATA_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_AXI_DATA_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_AXI_DATA_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DATA_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DATA_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DATA_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_AXI_DATA_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_AXI_DATA_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_AXI_DATA_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DATA_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DATA_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DATA_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DATA_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_AXI_DATA_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DATA_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_AXI_DATA_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_AXI_DATA_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_AXI_DATA_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_AXI_DATA_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_AXI_DATA_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_AXI_DATA_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_AXI_DATA_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_AXI_DATA_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DATA_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DATA_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DATA_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_AXI_DATA_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_AXI_DATA_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DATA_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_AXI_DATA_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_AXI_DATA_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_AXI_DATA_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_AXI_DATA_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_AXI_DATA_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_AXI_DATA_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "image_processing";
